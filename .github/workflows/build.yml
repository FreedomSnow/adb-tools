name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        # GitHub Actions支持免费的macOS构建（公共仓库）
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run download-adb

    - name: Decode and import certificate
      if: matrix.os == 'macos-latest'
      run: |
        echo "$MAC_CERTIFICATE" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$MAC_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
      env:
        MAC_CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
        MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}

    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npm run build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build for macOS (ARM64 only)
      if: matrix.os == 'macos-latest'
      run: npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Sign app
      if: matrix.os == 'macos-latest'
      run: npx electron-osx-sign release/YourApp.app --identity="Developer ID Application: Jiepeng Du (2UPAP45HZK)"

    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: npm run build:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: release/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release files
      run: |
        mkdir -p release-files
        find artifacts/ -name "*.exe" -exec cp {} release-files/ \;
        find artifacts/ -name "*.dmg" -exec cp {} release-files/ \;
        find artifacts/ -name "*.AppImage" -exec cp {} release-files/ \;
        find artifacts/ -name "*.zip" -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Release to GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: release-files/*
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 